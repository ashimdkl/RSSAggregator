import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * Program to convert an XML RSS (version 2.0) feed from a given URL into the
 * corresponding HTML output file.
 *
 * @author Ashim Dhakal
 *
 */
public final class RSSAggregator {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private RSSAggregator() {
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * <html> <head> <title>the channel tag title as the page title
     *
     * <h1>the page title inside a link to the <channel> link</h1>
     * <p>
     * the channel description
     * </p>
     * <table border="1">
     * <tr>
     * <th>Date</th>
     * <th>Source</th>
     * <th>News</th>
     * </tr>
     *
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputHeader(XMLTree channel, SimpleWriter out) {
        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals("channel") : ""
                + "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        XMLTree title = channel.child(getChildElement(channel, "title"));
        // getting the title ^
        XMLTree link = channel.child(getChildElement(channel, "link"));
        // getting the link
        // stuff below is just outputting the html
        out.println("<html>");
        out.println("<head>");
        if (title.numberOfChildren() > 0) {
            out.println("<title>" + title.child(0).label() + "</title>");
            // title
        } else {
            out.println("<title>Untitled</title>");
            // default title if no exists
        }
        out.println("</head>");
        out.println("<h1><a href=\"" + link.child(0).label() + "\">"
                + title.child(0).label() + "</a></h1>");

        XMLTree desc = channel.child(getChildElement(channel, "description"));
        // checking desc and were checking
        if (desc.numberOfChildren() > 0) {
            out.println("<p>" + desc.child(0).label() + "</p>");
        } else {
            out.println("<p>No description available.</p>");
        }

        out.println("<table border=1>");
        out.println("<tr>");
        out.println("<td>Date</td>");
        out.println("<td>Source</td>");
        out.println("<td>News</td>");
        out.println("</tr>");
        // ^ table displaying
    }

    /**
     * Outputs the "opening" tags in the generated HTML file for the index.
     *
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */

    private static void showcaseFirstPage(XMLTree channel, SimpleWriter out) {
        out.println("<html>");
        out.println("<body>");

        // page title being displayed, just showcasing the index page.

        String indexHeader = channel.attributeValue("title");
        out.println("<title>" + indexHeader + "</title>");
        out.println("<head>" + indexHeader + "</head>");
        out.println("<ul>");

        // loop to go through each element in numberOfChildren and the channels
        // and pretty much display the files, names, and output w the href link
        for (int i = 0; i < channel.numberOfChildren(); i++) {
            String file = channel.child(i).attributeValue("file");
            String name = channel.child(i).attributeValue("name");
            out.println("<li><a href=\"" + file + "\">" + name + "</a></li>");
        }
        // closing below
        out.println("</ul>");

        out.println("</body>");
        out.println("</html>");
    }

    /**
     * Outputs the "closing" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * </table>
     * </body> </html>
     *
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";

        out.println("</table>");
        out.println("</body>");
        out.println("</html>");
        // closing all the streams, these are the output streams ^^
    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     *
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of type tag of the {@code XMLTree}
     *         or -1 if not found
     * @requires [the label of the root of xml is a tag]
     * @ensures <pre>
     * getChildElement =
     *  [the index of the first child of type tag of the {@code XMLTree} or
     *   -1 if not found]
     * </pre>
     */
    private static int getChildElement(XMLTree xml, String tag) {
        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";

        int indexValue = -1, position = 0;
        // intialize index value at -1, & position at 0.
        while (xml.numberOfChildren() > position && indexValue == -1) {
            // just goes through and finds the position of stuff

            if (xml.child(position).isTag()
                    && xml.child(position).label().equals(tag)) {
                indexValue = position;
                // changes val of indexVal to the position
            }
            position++; // increment
        }
        return indexValue; // return
    }

    /**
     * Processes one news item and outputs one table row. The row contains three
     * elements: the publication date, the source, and the title (or
     * description) of the item.
     *
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the label of the root of item is an <item> tag] and
     *           out.is_open
     * @ensures <pre>
     * out.content = #out.content *
     *   [an HTML table row with publication date, source, and title of news item]
     * </pre>
     */
    private static void processItem(XMLTree item, SimpleWriter out) {
        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item") : ""
                + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";
        out.println("<table border = 1");
        out.println("<tr>");
        // finding publication date
        int index = getChildElement(item, "pubDate");

        if (index != -1) {
            out.println("<td>" + item.child(index).child(0).label() + "</td>");
        } else {
            out.println("<td>No date available</td>");
        }
        // getting the url & label name
        index = getChildElement(item, "source");
        /*
         * if (index != -1 && item.child(index).numberOfChildren() > 0) { String
         * title = item.child(index).child(0).label();
         */
        if (index != -1) {
            out.println("<td><a href = "
                    + item.child(index).attributeValue("url") + ">"
                    + item.child(index).child(0).label() + "</a></td>");
        } else {
            out.println("<td>No source available</td>");
        }

        // getting title
        index = getChildElement(item, "title");
        if (index >= 0 && item.child(index).numberOfChildren() > 0) {
            String title = item.child(index).child(0).label();
            if (getChildElement(item, "link") == -1) {
                out.println("<td>" + title + "</td>");
            } else {
                out.println(
                        "<td><a href = "
                                + item.child(getChildElement(item, "link"))
                                        .child(0).label()
                                + ">" + title + "</a></td>");
                // displaying all the titles w the links
            }
        } else {
            index = getChildElement(item, "description");
            String descriptionContent;
            // desc ^

            if (index == -1) {
                descriptionContent = "no description";
            } else {
                descriptionContent = item.child(index).child(0).label();
            }

            if (getChildElement(item, "link") == -1) {
                out.println("<td>" + descriptionContent + "</td>");
            } else {
                out.println("<td><a href = "
                        + item.child(getChildElement(item, "link")).child(0)
                                .label()
                        + ">" + descriptionContent + "</a></td>");
            }
        }

        out.println("</tr>"); // closing the rows
    }

    /**
     * Processes one XML RSS (version 2.0) feed from a given URL converting it
     * into the corresponding HTML output file.
     *
     * @param url
     *            the URL of the RSS feed
     * @param file
     *            the name of the HTML output file
     * @param out
     *            the output stream to report progress or errors
     * @updates out.content
     * @requires out.is_open
     * @ensures <pre>
     * [reads RSS feed from url, saves HTML document with table of news items
     *   to file, appends to out.content any needed messages]
     * </pre>
     */
    private static void processFeed(String url, String file, SimpleWriter out) {
        XMLTree t = new XMLTree1(url);
        SimpleReader in = new SimpleReader1L();

        String versionvalue = t.attributeValue("version");
        String rootlabel = t.label();

        if (!"rss".equals(rootlabel) || !"2.0".equals(versionvalue)) {
            out.println("Invalid RSS format.");

            // prompt the user to enter a different URL for an RSS 2.0 feed
            out.println("Enter a different URL for an RSS 2.0 feed:");
            String value = in.nextLine();
            XMLTree tree = new XMLTree1(value);

            // check if the new tree is a valid RSS 2.0 feed
            while (!"rss".equals(tree.label())
                    || !"2.0".equals(tree.attributeValue("version"))) {
                out.println("not a proper RSS 2.0 feed.");

                // prompt the user to enter a different URL for an RSS 2.0 feed
                out.println("enter diff URL for an RSS 2.0 feed:");
                value = in.nextLine();
                tree = new XMLTree1(value);
            }

            // set the tree to the valid RSS 2.0 feed
            t = tree;
        }

        // output file name
        SimpleWriter output = new SimpleWriter1L(file);

        // header printed
        XMLTree channel = t.child(0);
        outputHeader(channel, output);

        // output paragraph in  file w/ the description
        XMLTree description = channel
                .child(getChildElement(channel, "description"));
        if (getChildElement(channel, "description") == -1) {
            String descriptionContent = description.child(0).label();
            output.println("<p>" + descriptionContent + "</p>");
        }
        // set up the table / columns
        output.println("<table>");
        output.println("<tr>");
        output.println("</tr>");

        //  table to the file is outputted

        for (int i = getChildElement(channel, "item"); (i != -1
                && i < channel.numberOfChildren()); i++) {
            if (channel.child(i).label().equals("item")) {
                processItem(channel.child(i), output);
            }
        }

        // end the table tag
        output.println("</table>");

        // closing tags for html document
        outputFooter(output);

        output.close();
        in.close();

    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        // ask user to enter details
        out.println("Enter the URL of feed list:");
        XMLTree root = new XMLTree1(in.nextLine());

        // name of output file
        out.println("enter name of output file: ");
        SimpleWriter output = new SimpleWriter1L(in.nextLine());

        showcaseFirstPage(root, output);
        // this calls the showcaseFirstPage method and runs it

        // going through each element in the numberOfChildren and increments
        // throughout and outputs the file and the url
        for (int i = 0; i < root.numberOfChildren(); i++) {
            String outputted = (root.child(i).attributeValue("file"));
            String url = root.child(i).attributeValue("url");
            processFeed(url, outputted, out); // calls the processFeed method
        }
        // closing
        in.close();
        out.close();
    }
}
